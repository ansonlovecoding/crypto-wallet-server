// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.11
// source: wallet/wallet.proto

package wallet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
}

func (x *CommonReq) Reset() {
	*x = CommonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonReq) ProtoMessage() {}

func (x *CommonReq) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonReq.ProtoReflect.Descriptor instead.
func (*CommonReq) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{0}
}

func (x *CommonReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type CommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode int32  `protobuf:"varint,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
}

func (x *CommonResp) Reset() {
	*x = CommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResp) ProtoMessage() {}

func (x *CommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResp.ProtoReflect.Descriptor instead.
func (*CommonResp) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{1}
}

func (x *CommonResp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *CommonResp) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type RequestPagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32 `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize int32 `protobuf:"varint,2,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *RequestPagination) Reset() {
	*x = RequestPagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPagination) ProtoMessage() {}

func (x *RequestPagination) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPagination.ProtoReflect.Descriptor instead.
func (*RequestPagination) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{2}
}

func (x *RequestPagination) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *RequestPagination) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ResponsePagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32 `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize int32 `protobuf:"varint,2,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *ResponsePagination) Reset() {
	*x = ResponsePagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePagination) ProtoMessage() {}

func (x *ResponsePagination) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePagination.ProtoReflect.Descriptor instead.
func (*ResponsePagination) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *ResponsePagination) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ResponsePagination) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetSupportTokenAddressesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
}

func (x *GetSupportTokenAddressesReq) Reset() {
	*x = GetSupportTokenAddressesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupportTokenAddressesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupportTokenAddressesReq) ProtoMessage() {}

func (x *GetSupportTokenAddressesReq) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupportTokenAddressesReq.ProtoReflect.Descriptor instead.
func (*GetSupportTokenAddressesReq) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{4}
}

func (x *GetSupportTokenAddressesReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type SupportTokenAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BelongCoin      uint32 `protobuf:"varint,1,opt,name=BelongCoin,proto3" json:"BelongCoin,omitempty"`
	CoinType        uint32 `protobuf:"varint,2,opt,name=CoinType,proto3" json:"CoinType,omitempty"`
	ContractAddress string `protobuf:"bytes,3,opt,name=ContractAddress,proto3" json:"ContractAddress,omitempty"`
}

func (x *SupportTokenAddress) Reset() {
	*x = SupportTokenAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportTokenAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportTokenAddress) ProtoMessage() {}

func (x *SupportTokenAddress) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportTokenAddress.ProtoReflect.Descriptor instead.
func (*SupportTokenAddress) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{5}
}

func (x *SupportTokenAddress) GetBelongCoin() uint32 {
	if x != nil {
		return x.BelongCoin
	}
	return 0
}

func (x *SupportTokenAddress) GetCoinType() uint32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

func (x *SupportTokenAddress) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

type GetSupportTokenAddressesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode     int32                  `protobuf:"varint,1,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	ErrMsg      string                 `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	AddressList []*SupportTokenAddress `protobuf:"bytes,3,rep,name=AddressList,proto3" json:"AddressList,omitempty"`
}

func (x *GetSupportTokenAddressesResp) Reset() {
	*x = GetSupportTokenAddressesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupportTokenAddressesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupportTokenAddressesResp) ProtoMessage() {}

func (x *GetSupportTokenAddressesResp) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupportTokenAddressesResp.ProtoReflect.Descriptor instead.
func (*GetSupportTokenAddressesResp) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{6}
}

func (x *GetSupportTokenAddressesResp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *GetSupportTokenAddressesResp) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *GetSupportTokenAddressesResp) GetAddressList() []*SupportTokenAddress {
	if x != nil {
		return x.AddressList
	}
	return nil
}

type CreateAccountInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID           string  `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Uid                   string  `protobuf:"bytes,2,opt,name=Uid,proto3" json:"Uid,omitempty"`
	MerchantId            string  `protobuf:"bytes,3,opt,name=MerchantId,proto3" json:"MerchantId,omitempty"`
	WalletAddress         string  `protobuf:"bytes,4,opt,name=WalletAddress,proto3" json:"WalletAddress,omitempty"`
	BtcPublicAddress      string  `protobuf:"bytes,5,opt,name=BtcPublicAddress,proto3" json:"BtcPublicAddress,omitempty"`
	EthPublicAddress      string  `protobuf:"bytes,6,opt,name=EthPublicAddress,proto3" json:"EthPublicAddress,omitempty"`
	TrxPublicAddress      string  `protobuf:"bytes,7,opt,name=TrxPublicAddress,proto3" json:"TrxPublicAddress,omitempty"`
	ErcPublicAddress      string  `protobuf:"bytes,8,opt,name=ErcPublicAddress,proto3" json:"ErcPublicAddress,omitempty"`
	TrcPublicAddress      string  `protobuf:"bytes,9,opt,name=TrcPublicAddress,proto3" json:"TrcPublicAddress,omitempty"`
	BtcBalance            float64 `protobuf:"fixed64,10,opt,name=BtcBalance,proto3" json:"BtcBalance,omitempty"`
	EthBalance            float64 `protobuf:"fixed64,11,opt,name=EthBalance,proto3" json:"EthBalance,omitempty"`
	TrxBalance            float64 `protobuf:"fixed64,12,opt,name=TrxBalance,proto3" json:"TrxBalance,omitempty"`
	ErcBalance            float64 `protobuf:"fixed64,13,opt,name=ErcBalance,proto3" json:"ErcBalance,omitempty"`
	TrcBalance            float64 `protobuf:"fixed64,14,opt,name=TrcBalance,proto3" json:"TrcBalance,omitempty"`
	AccountSource         string  `protobuf:"bytes,15,opt,name=AccountSource,proto3" json:"AccountSource,omitempty"`
	CreationLoginIp       string  `protobuf:"bytes,16,opt,name=CreationLoginIp,proto3" json:"CreationLoginIp,omitempty"`
	CreationLoginRegion   string  `protobuf:"bytes,17,opt,name=CreationLoginRegion,proto3" json:"CreationLoginRegion,omitempty"`
	CreationLoginTerminal string  `protobuf:"bytes,18,opt,name=CreationLoginTerminal,proto3" json:"CreationLoginTerminal,omitempty"`
	CreationLoginTime     int64   `protobuf:"varint,19,opt,name=CreationLoginTime,proto3" json:"CreationLoginTime,omitempty"`
	LastLoginIp           string  `protobuf:"bytes,20,opt,name=LastLoginIp,proto3" json:"LastLoginIp,omitempty"`
	LastLoginRegion       string  `protobuf:"bytes,21,opt,name=LastLoginRegion,proto3" json:"LastLoginRegion,omitempty"`
	LastLoginTerminal     string  `protobuf:"bytes,22,opt,name=LastLoginTerminal,proto3" json:"LastLoginTerminal,omitempty"`
	LastLoginTime         int64   `protobuf:"varint,23,opt,name=LastLoginTime,proto3" json:"LastLoginTime,omitempty"`
}

func (x *CreateAccountInfoReq) Reset() {
	*x = CreateAccountInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountInfoReq) ProtoMessage() {}

func (x *CreateAccountInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountInfoReq.ProtoReflect.Descriptor instead.
func (*CreateAccountInfoReq) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{7}
}

func (x *CreateAccountInfoReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *CreateAccountInfoReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *CreateAccountInfoReq) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *CreateAccountInfoReq) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *CreateAccountInfoReq) GetBtcPublicAddress() string {
	if x != nil {
		return x.BtcPublicAddress
	}
	return ""
}

func (x *CreateAccountInfoReq) GetEthPublicAddress() string {
	if x != nil {
		return x.EthPublicAddress
	}
	return ""
}

func (x *CreateAccountInfoReq) GetTrxPublicAddress() string {
	if x != nil {
		return x.TrxPublicAddress
	}
	return ""
}

func (x *CreateAccountInfoReq) GetErcPublicAddress() string {
	if x != nil {
		return x.ErcPublicAddress
	}
	return ""
}

func (x *CreateAccountInfoReq) GetTrcPublicAddress() string {
	if x != nil {
		return x.TrcPublicAddress
	}
	return ""
}

func (x *CreateAccountInfoReq) GetBtcBalance() float64 {
	if x != nil {
		return x.BtcBalance
	}
	return 0
}

func (x *CreateAccountInfoReq) GetEthBalance() float64 {
	if x != nil {
		return x.EthBalance
	}
	return 0
}

func (x *CreateAccountInfoReq) GetTrxBalance() float64 {
	if x != nil {
		return x.TrxBalance
	}
	return 0
}

func (x *CreateAccountInfoReq) GetErcBalance() float64 {
	if x != nil {
		return x.ErcBalance
	}
	return 0
}

func (x *CreateAccountInfoReq) GetTrcBalance() float64 {
	if x != nil {
		return x.TrcBalance
	}
	return 0
}

func (x *CreateAccountInfoReq) GetAccountSource() string {
	if x != nil {
		return x.AccountSource
	}
	return ""
}

func (x *CreateAccountInfoReq) GetCreationLoginIp() string {
	if x != nil {
		return x.CreationLoginIp
	}
	return ""
}

func (x *CreateAccountInfoReq) GetCreationLoginRegion() string {
	if x != nil {
		return x.CreationLoginRegion
	}
	return ""
}

func (x *CreateAccountInfoReq) GetCreationLoginTerminal() string {
	if x != nil {
		return x.CreationLoginTerminal
	}
	return ""
}

func (x *CreateAccountInfoReq) GetCreationLoginTime() int64 {
	if x != nil {
		return x.CreationLoginTime
	}
	return 0
}

func (x *CreateAccountInfoReq) GetLastLoginIp() string {
	if x != nil {
		return x.LastLoginIp
	}
	return ""
}

func (x *CreateAccountInfoReq) GetLastLoginRegion() string {
	if x != nil {
		return x.LastLoginRegion
	}
	return ""
}

func (x *CreateAccountInfoReq) GetLastLoginTerminal() string {
	if x != nil {
		return x.LastLoginTerminal
	}
	return ""
}

func (x *CreateAccountInfoReq) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

type CreateAccountInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
}

func (x *CreateAccountInfoResp) Reset() {
	*x = CreateAccountInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountInfoResp) ProtoMessage() {}

func (x *CreateAccountInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountInfoResp.ProtoReflect.Descriptor instead.
func (*CreateAccountInfoResp) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{8}
}

func (x *CreateAccountInfoResp) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type UpdateAccountInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID       string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Uid               string `protobuf:"bytes,2,opt,name=Uid,proto3" json:"Uid,omitempty"`
	MerchantId        string `protobuf:"bytes,3,opt,name=MerchantId,proto3" json:"MerchantId,omitempty"`
	LastLoginIp       string `protobuf:"bytes,4,opt,name=LastLoginIp,proto3" json:"LastLoginIp,omitempty"`
	LastLoginRegion   string `protobuf:"bytes,5,opt,name=LastLoginRegion,proto3" json:"LastLoginRegion,omitempty"`
	LastLoginTerminal string `protobuf:"bytes,6,opt,name=LastLoginTerminal,proto3" json:"LastLoginTerminal,omitempty"`
	LastLoginTime     int64  `protobuf:"varint,7,opt,name=LastLoginTime,proto3" json:"LastLoginTime,omitempty"`
}

func (x *UpdateAccountInfoReq) Reset() {
	*x = UpdateAccountInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountInfoReq) ProtoMessage() {}

func (x *UpdateAccountInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountInfoReq.ProtoReflect.Descriptor instead.
func (*UpdateAccountInfoReq) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateAccountInfoReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *UpdateAccountInfoReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *UpdateAccountInfoReq) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *UpdateAccountInfoReq) GetLastLoginIp() string {
	if x != nil {
		return x.LastLoginIp
	}
	return ""
}

func (x *UpdateAccountInfoReq) GetLastLoginRegion() string {
	if x != nil {
		return x.LastLoginRegion
	}
	return ""
}

func (x *UpdateAccountInfoReq) GetLastLoginTerminal() string {
	if x != nil {
		return x.LastLoginTerminal
	}
	return ""
}

func (x *UpdateAccountInfoReq) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

type FundsLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                      int64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Txid                    string  `protobuf:"bytes,2,opt,name=Txid,proto3" json:"Txid,omitempty"`
	TransactionType         string  `protobuf:"bytes,3,opt,name=TransactionType,proto3" json:"TransactionType,omitempty"`
	UserAddress             string  `protobuf:"bytes,4,opt,name=UserAddress,proto3" json:"UserAddress,omitempty"`
	OppositeAddress         string  `protobuf:"bytes,5,opt,name=OppositeAddress,proto3" json:"OppositeAddress,omitempty"`
	BalanceBefore           float64 `protobuf:"fixed64,6,opt,name=BalanceBefore,proto3" json:"BalanceBefore,omitempty"`
	BalanceAfter            float64 `protobuf:"fixed64,7,opt,name=BalanceAfter,proto3" json:"BalanceAfter,omitempty"`
	CoinType                string  `protobuf:"bytes,8,opt,name=CoinType,proto3" json:"CoinType,omitempty"`
	AmountOfCoins           float64 `protobuf:"fixed64,9,opt,name=AmountOfCoins,proto3" json:"AmountOfCoins,omitempty"`
	UsdAmount               float64 `protobuf:"fixed64,10,opt,name=UsdAmount,proto3" json:"UsdAmount,omitempty"`
	YuanAmount              float64 `protobuf:"fixed64,11,opt,name=YuanAmount,proto3" json:"YuanAmount,omitempty"`
	EuroAmount              float64 `protobuf:"fixed64,12,opt,name=EuroAmount,proto3" json:"EuroAmount,omitempty"`
	NetworkFee              float64 `protobuf:"fixed64,13,opt,name=NetworkFee,proto3" json:"NetworkFee,omitempty"`
	UsdNetworkFee           float64 `protobuf:"fixed64,14,opt,name=UsdNetworkFee,proto3" json:"UsdNetworkFee,omitempty"`
	YuanNetworkFee          float64 `protobuf:"fixed64,15,opt,name=YuanNetworkFee,proto3" json:"YuanNetworkFee,omitempty"`
	EuroNetworkFee          float64 `protobuf:"fixed64,16,opt,name=EuroNetworkFee,proto3" json:"EuroNetworkFee,omitempty"`
	TotalCoinsTransfered    float64 `protobuf:"fixed64,17,opt,name=TotalCoinsTransfered,proto3" json:"TotalCoinsTransfered,omitempty"`
	TotalUsdTransfered      float64 `protobuf:"fixed64,18,opt,name=TotalUsdTransfered,proto3" json:"TotalUsdTransfered,omitempty"`
	TotalYuanTransfered     float64 `protobuf:"fixed64,19,opt,name=TotalYuanTransfered,proto3" json:"TotalYuanTransfered,omitempty"`
	TotalEuroTransfered     float64 `protobuf:"fixed64,20,opt,name=TotalEuroTransfered,proto3" json:"TotalEuroTransfered,omitempty"`
	CreationTime            int64   `protobuf:"varint,21,opt,name=CreationTime,proto3" json:"CreationTime,omitempty"`
	State                   string  `protobuf:"bytes,22,opt,name=State,proto3" json:"State,omitempty"`
	ConfirmationTime        int64   `protobuf:"varint,23,opt,name=ConfirmationTime,proto3" json:"ConfirmationTime,omitempty"`
	Uid                     string  `protobuf:"bytes,24,opt,name=Uid,proto3" json:"Uid,omitempty"`
	MerchantUid             string  `protobuf:"bytes,25,opt,name=MerchantUid,proto3" json:"MerchantUid,omitempty"`
	GasLimit                uint64  `protobuf:"varint,26,opt,name=GasLimit,proto3" json:"GasLimit,omitempty"`
	GasPrice                uint64  `protobuf:"varint,27,opt,name=GasPrice,proto3" json:"GasPrice,omitempty"`
	GasUsed                 uint64  `protobuf:"varint,28,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	ConfirmationBlockNumber string  `protobuf:"bytes,29,opt,name=ConfirmationBlockNumber,proto3" json:"ConfirmationBlockNumber,omitempty"`
}

func (x *FundsLog) Reset() {
	*x = FundsLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundsLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundsLog) ProtoMessage() {}

func (x *FundsLog) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundsLog.ProtoReflect.Descriptor instead.
func (*FundsLog) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{10}
}

func (x *FundsLog) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *FundsLog) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *FundsLog) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *FundsLog) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *FundsLog) GetOppositeAddress() string {
	if x != nil {
		return x.OppositeAddress
	}
	return ""
}

func (x *FundsLog) GetBalanceBefore() float64 {
	if x != nil {
		return x.BalanceBefore
	}
	return 0
}

func (x *FundsLog) GetBalanceAfter() float64 {
	if x != nil {
		return x.BalanceAfter
	}
	return 0
}

func (x *FundsLog) GetCoinType() string {
	if x != nil {
		return x.CoinType
	}
	return ""
}

func (x *FundsLog) GetAmountOfCoins() float64 {
	if x != nil {
		return x.AmountOfCoins
	}
	return 0
}

func (x *FundsLog) GetUsdAmount() float64 {
	if x != nil {
		return x.UsdAmount
	}
	return 0
}

func (x *FundsLog) GetYuanAmount() float64 {
	if x != nil {
		return x.YuanAmount
	}
	return 0
}

func (x *FundsLog) GetEuroAmount() float64 {
	if x != nil {
		return x.EuroAmount
	}
	return 0
}

func (x *FundsLog) GetNetworkFee() float64 {
	if x != nil {
		return x.NetworkFee
	}
	return 0
}

func (x *FundsLog) GetUsdNetworkFee() float64 {
	if x != nil {
		return x.UsdNetworkFee
	}
	return 0
}

func (x *FundsLog) GetYuanNetworkFee() float64 {
	if x != nil {
		return x.YuanNetworkFee
	}
	return 0
}

func (x *FundsLog) GetEuroNetworkFee() float64 {
	if x != nil {
		return x.EuroNetworkFee
	}
	return 0
}

func (x *FundsLog) GetTotalCoinsTransfered() float64 {
	if x != nil {
		return x.TotalCoinsTransfered
	}
	return 0
}

func (x *FundsLog) GetTotalUsdTransfered() float64 {
	if x != nil {
		return x.TotalUsdTransfered
	}
	return 0
}

func (x *FundsLog) GetTotalYuanTransfered() float64 {
	if x != nil {
		return x.TotalYuanTransfered
	}
	return 0
}

func (x *FundsLog) GetTotalEuroTransfered() float64 {
	if x != nil {
		return x.TotalEuroTransfered
	}
	return 0
}

func (x *FundsLog) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *FundsLog) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *FundsLog) GetConfirmationTime() int64 {
	if x != nil {
		return x.ConfirmationTime
	}
	return 0
}

func (x *FundsLog) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *FundsLog) GetMerchantUid() string {
	if x != nil {
		return x.MerchantUid
	}
	return ""
}

func (x *FundsLog) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *FundsLog) GetGasPrice() uint64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *FundsLog) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *FundsLog) GetConfirmationBlockNumber() string {
	if x != nil {
		return x.ConfirmationBlockNumber
	}
	return ""
}

type GetFundsLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID     string             `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	Uid             string             `protobuf:"bytes,2,opt,name=Uid,proto3" json:"Uid,omitempty"`
	MerchantUid     string             `protobuf:"bytes,3,opt,name=MerchantUid,proto3" json:"MerchantUid,omitempty"`
	From            string             `protobuf:"bytes,4,opt,name=From,proto3" json:"From,omitempty"`
	To              string             `protobuf:"bytes,5,opt,name=To,proto3" json:"To,omitempty"`
	TransactionType string             `protobuf:"bytes,6,opt,name=TransactionType,proto3" json:"TransactionType,omitempty"`
	UserAddress     string             `protobuf:"bytes,7,opt,name=UserAddress,proto3" json:"UserAddress,omitempty"`
	OppositeAddress string             `protobuf:"bytes,8,opt,name=OppositeAddress,proto3" json:"OppositeAddress,omitempty"`
	CoinsType       string             `protobuf:"bytes,9,opt,name=CoinsType,proto3" json:"CoinsType,omitempty"`
	State           string             `protobuf:"bytes,10,opt,name=State,proto3" json:"State,omitempty"`
	Txid            string             `protobuf:"bytes,11,opt,name=Txid,proto3" json:"Txid,omitempty"`
	Pagination      *RequestPagination `protobuf:"bytes,12,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
}

func (x *GetFundsLogReq) Reset() {
	*x = GetFundsLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFundsLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFundsLogReq) ProtoMessage() {}

func (x *GetFundsLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFundsLogReq.ProtoReflect.Descriptor instead.
func (*GetFundsLogReq) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{11}
}

func (x *GetFundsLogReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetFundsLogReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetFundsLogReq) GetMerchantUid() string {
	if x != nil {
		return x.MerchantUid
	}
	return ""
}

func (x *GetFundsLogReq) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetFundsLogReq) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetFundsLogReq) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *GetFundsLogReq) GetUserAddress() string {
	if x != nil {
		return x.UserAddress
	}
	return ""
}

func (x *GetFundsLogReq) GetOppositeAddress() string {
	if x != nil {
		return x.OppositeAddress
	}
	return ""
}

func (x *GetFundsLogReq) GetCoinsType() string {
	if x != nil {
		return x.CoinsType
	}
	return ""
}

func (x *GetFundsLogReq) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GetFundsLogReq) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *GetFundsLogReq) GetPagination() *RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetFundsLogResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination    *ResponsePagination `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	FundLog       []*FundsLog         `protobuf:"bytes,2,rep,name=FundLog,proto3" json:"FundLog,omitempty"`
	TotalFundLogs int64               `protobuf:"varint,3,opt,name=TotalFundLogs,proto3" json:"TotalFundLogs,omitempty"`
}

func (x *GetFundsLogResp) Reset() {
	*x = GetFundsLogResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFundsLogResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFundsLogResp) ProtoMessage() {}

func (x *GetFundsLogResp) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFundsLogResp.ProtoReflect.Descriptor instead.
func (*GetFundsLogResp) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{12}
}

func (x *GetFundsLogResp) GetPagination() *ResponsePagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetFundsLogResp) GetFundLog() []*FundsLog {
	if x != nil {
		return x.FundLog
	}
	return nil
}

func (x *GetFundsLogResp) GetTotalFundLogs() int64 {
	if x != nil {
		return x.TotalFundLogs
	}
	return 0
}

type GetCoinStatusesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
}

func (x *GetCoinStatusesReq) Reset() {
	*x = GetCoinStatusesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinStatusesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinStatusesReq) ProtoMessage() {}

func (x *GetCoinStatusesReq) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinStatusesReq.ProtoReflect.Descriptor instead.
func (*GetCoinStatusesReq) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{13}
}

func (x *GetCoinStatusesReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CoinType       string `protobuf:"bytes,2,opt,name=CoinType,proto3" json:"CoinType,omitempty"`
	LastEditedTime int64  `protobuf:"varint,3,opt,name=LastEditedTime,proto3" json:"LastEditedTime,omitempty"`
	Editor         string `protobuf:"bytes,4,opt,name=Editor,proto3" json:"Editor,omitempty"`
	State          int32  `protobuf:"varint,5,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{14}
}

func (x *Currency) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Currency) GetCoinType() string {
	if x != nil {
		return x.CoinType
	}
	return ""
}

func (x *Currency) GetLastEditedTime() int64 {
	if x != nil {
		return x.LastEditedTime
	}
	return 0
}

func (x *Currency) GetEditor() string {
	if x != nil {
		return x.Editor
	}
	return ""
}

func (x *Currency) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type GetCoinStatusesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currencies []*Currency `protobuf:"bytes,1,rep,name=Currencies,proto3" json:"Currencies,omitempty"`
}

func (x *GetCoinStatusesResp) Reset() {
	*x = GetCoinStatusesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinStatusesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinStatusesResp) ProtoMessage() {}

func (x *GetCoinStatusesResp) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinStatusesResp.ProtoReflect.Descriptor instead.
func (*GetCoinStatusesResp) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{15}
}

func (x *GetCoinStatusesResp) GetCurrencies() []*Currency {
	if x != nil {
		return x.Currencies
	}
	return nil
}

type GetCoinRatioReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
}

func (x *GetCoinRatioReq) Reset() {
	*x = GetCoinRatioReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinRatioReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinRatioReq) ProtoMessage() {}

func (x *GetCoinRatioReq) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinRatioReq.ProtoReflect.Descriptor instead.
func (*GetCoinRatioReq) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{16}
}

func (x *GetCoinRatioReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       int32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	CoinType string  `protobuf:"bytes,2,opt,name=CoinType,proto3" json:"CoinType,omitempty"`
	Usd      float64 `protobuf:"fixed64,3,opt,name=Usd,proto3" json:"Usd,omitempty"`
	Yuan     float64 `protobuf:"fixed64,4,opt,name=Yuan,proto3" json:"Yuan,omitempty"`
	Euro     float64 `protobuf:"fixed64,5,opt,name=Euro,proto3" json:"Euro,omitempty"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{17}
}

func (x *Coin) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Coin) GetCoinType() string {
	if x != nil {
		return x.CoinType
	}
	return ""
}

func (x *Coin) GetUsd() float64 {
	if x != nil {
		return x.Usd
	}
	return 0
}

func (x *Coin) GetYuan() float64 {
	if x != nil {
		return x.Yuan
	}
	return 0
}

func (x *Coin) GetEuro() float64 {
	if x != nil {
		return x.Euro
	}
	return 0
}

type GetCoinRatioResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coins []*Coin `protobuf:"bytes,1,rep,name=Coins,proto3" json:"Coins,omitempty"`
}

func (x *GetCoinRatioResp) Reset() {
	*x = GetCoinRatioResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinRatioResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinRatioResp) ProtoMessage() {}

func (x *GetCoinRatioResp) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinRatioResp.ProtoReflect.Descriptor instead.
func (*GetCoinRatioResp) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{18}
}

func (x *GetCoinRatioResp) GetCoins() []*Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

type GetUserWalletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	CoinType    uint32 `protobuf:"varint,3,opt,name=CoinType,proto3" json:"CoinType,omitempty"`
}

func (x *GetUserWalletReq) Reset() {
	*x = GetUserWalletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserWalletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserWalletReq) ProtoMessage() {}

func (x *GetUserWalletReq) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserWalletReq.ProtoReflect.Descriptor instead.
func (*GetUserWalletReq) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{19}
}

func (x *GetUserWalletReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetUserWalletReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserWalletReq) GetCoinType() uint32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

type GetUserWalletResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasWallet bool   `protobuf:"varint,1,opt,name=HasWallet,proto3" json:"HasWallet,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *GetUserWalletResp) Reset() {
	*x = GetUserWalletResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserWalletResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserWalletResp) ProtoMessage() {}

func (x *GetUserWalletResp) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserWalletResp.ProtoReflect.Descriptor instead.
func (*GetUserWalletResp) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{20}
}

func (x *GetUserWalletResp) GetHasWallet() bool {
	if x != nil {
		return x.HasWallet
	}
	return false
}

func (x *GetUserWalletResp) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type UpdateCoinRatesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
}

func (x *UpdateCoinRatesReq) Reset() {
	*x = UpdateCoinRatesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoinRatesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoinRatesReq) ProtoMessage() {}

func (x *UpdateCoinRatesReq) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoinRatesReq.ProtoReflect.Descriptor instead.
func (*UpdateCoinRatesReq) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateCoinRatesReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

type GetTransactionDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationID     string `protobuf:"bytes,1,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	CoinType        int32  `protobuf:"varint,2,opt,name=CoinType,proto3" json:"CoinType,omitempty"`
	TransactionHash string `protobuf:"bytes,3,opt,name=TransactionHash,proto3" json:"TransactionHash,omitempty"`
}

func (x *GetTransactionDetailReq) Reset() {
	*x = GetTransactionDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionDetailReq) ProtoMessage() {}

func (x *GetTransactionDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionDetailReq.ProtoReflect.Descriptor instead.
func (*GetTransactionDetailReq) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{22}
}

func (x *GetTransactionDetailReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetTransactionDetailReq) GetCoinType() int32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

func (x *GetTransactionDetailReq) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

type GetTransactionDetailRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionDetails *TransactionDetail `protobuf:"bytes,1,opt,name=TransactionDetails,proto3" json:"TransactionDetails,omitempty"`
}

func (x *GetTransactionDetailRes) Reset() {
	*x = GetTransactionDetailRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionDetailRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionDetailRes) ProtoMessage() {}

func (x *GetTransactionDetailRes) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionDetailRes.ProtoReflect.Descriptor instead.
func (*GetTransactionDetailRes) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{23}
}

func (x *GetTransactionDetailRes) GetTransactionDetails() *TransactionDetail {
	if x != nil {
		return x.TransactionDetails
	}
	return nil
}

type GetTransactionListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination       *RequestPagination `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	OperationID      string             `protobuf:"bytes,2,opt,name=OperationID,proto3" json:"OperationID,omitempty"`
	UserID           string             `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	PublicAddress    string             `protobuf:"bytes,4,opt,name=PublicAddress,proto3" json:"PublicAddress,omitempty"`
	TransactionType  int32              `protobuf:"varint,5,opt,name=TransactionType,proto3" json:"TransactionType,omitempty"`
	TransactionState int32              `protobuf:"varint,6,opt,name=TransactionState,proto3" json:"TransactionState,omitempty"`
	OrderBy          string             `protobuf:"bytes,7,opt,name=OrderBy,proto3" json:"OrderBy,omitempty"`
	TransactionHash  string             `protobuf:"bytes,8,opt,name=TransactionHash,proto3" json:"TransactionHash,omitempty"`
	CoinType         int32              `protobuf:"varint,9,opt,name=CoinType,proto3" json:"CoinType,omitempty"`
}

func (x *GetTransactionListReq) Reset() {
	*x = GetTransactionListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionListReq) ProtoMessage() {}

func (x *GetTransactionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionListReq.ProtoReflect.Descriptor instead.
func (*GetTransactionListReq) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{24}
}

func (x *GetTransactionListReq) GetPagination() *RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetTransactionListReq) GetOperationID() string {
	if x != nil {
		return x.OperationID
	}
	return ""
}

func (x *GetTransactionListReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetTransactionListReq) GetPublicAddress() string {
	if x != nil {
		return x.PublicAddress
	}
	return ""
}

func (x *GetTransactionListReq) GetTransactionType() int32 {
	if x != nil {
		return x.TransactionType
	}
	return 0
}

func (x *GetTransactionListReq) GetTransactionState() int32 {
	if x != nil {
		return x.TransactionState
	}
	return 0
}

func (x *GetTransactionListReq) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetTransactionListReq) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *GetTransactionListReq) GetCoinType() int32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

type TransactionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID               string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	SenderAccount      string `protobuf:"bytes,2,opt,name=SenderAccount,proto3" json:"SenderAccount,omitempty"`
	SenderAddress      string `protobuf:"bytes,3,opt,name=SenderAddress,proto3" json:"SenderAddress,omitempty"`
	ReceiverAccount    string `protobuf:"bytes,4,opt,name=ReceiverAccount,proto3" json:"ReceiverAccount,omitempty"`
	ReceiverAddress    string `protobuf:"bytes,5,opt,name=ReceiverAddress,proto3" json:"ReceiverAddress,omitempty"`
	Amount             string `protobuf:"bytes,6,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Fee                string `protobuf:"bytes,7,opt,name=Fee,proto3" json:"Fee,omitempty"`
	GasLimit           uint64 `protobuf:"varint,8,opt,name=GasLimit,proto3" json:"GasLimit,omitempty"`
	Nonce              uint64 `protobuf:"varint,9,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	SentHashTX         string `protobuf:"bytes,10,opt,name=SentHashTX,proto3" json:"SentHashTX,omitempty"`
	SentUpdatedAt      uint64 `protobuf:"varint,11,opt,name=SentUpdatedAt,proto3" json:"SentUpdatedAt,omitempty"`
	Status             int32  `protobuf:"varint,12,opt,name=Status,proto3" json:"Status,omitempty"`
	ConfirmTime        uint64 `protobuf:"varint,13,opt,name=ConfirmTime,proto3" json:"ConfirmTime,omitempty"`
	GasPrice           string `protobuf:"bytes,14,opt,name=GasPrice,proto3" json:"GasPrice,omitempty"`
	GasUsed            uint64 `protobuf:"varint,15,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	ConfirmBlockNumber string `protobuf:"bytes,17,opt,name=ConfirmBlockNumber,proto3" json:"ConfirmBlockNumber,omitempty"`
}

func (x *TransactionDetail) Reset() {
	*x = TransactionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionDetail) ProtoMessage() {}

func (x *TransactionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionDetail.ProtoReflect.Descriptor instead.
func (*TransactionDetail) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{25}
}

func (x *TransactionDetail) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *TransactionDetail) GetSenderAccount() string {
	if x != nil {
		return x.SenderAccount
	}
	return ""
}

func (x *TransactionDetail) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *TransactionDetail) GetReceiverAccount() string {
	if x != nil {
		return x.ReceiverAccount
	}
	return ""
}

func (x *TransactionDetail) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *TransactionDetail) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TransactionDetail) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *TransactionDetail) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *TransactionDetail) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TransactionDetail) GetSentHashTX() string {
	if x != nil {
		return x.SentHashTX
	}
	return ""
}

func (x *TransactionDetail) GetSentUpdatedAt() uint64 {
	if x != nil {
		return x.SentUpdatedAt
	}
	return 0
}

func (x *TransactionDetail) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TransactionDetail) GetConfirmTime() uint64 {
	if x != nil {
		return x.ConfirmTime
	}
	return 0
}

func (x *TransactionDetail) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *TransactionDetail) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *TransactionDetail) GetConfirmBlockNumber() string {
	if x != nil {
		return x.ConfirmBlockNumber
	}
	return ""
}

type GetTransactionListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination         *ResponsePagination  `protobuf:"bytes,1,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	TransactionDetails []*TransactionDetail `protobuf:"bytes,2,rep,name=TransactionDetails,proto3" json:"TransactionDetails,omitempty"`
	TotalTrans         int64                `protobuf:"varint,3,opt,name=TotalTrans,proto3" json:"TotalTrans,omitempty"`
}

func (x *GetTransactionListRes) Reset() {
	*x = GetTransactionListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_wallet_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionListRes) ProtoMessage() {}

func (x *GetTransactionListRes) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_wallet_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionListRes.ProtoReflect.Descriptor instead.
func (*GetTransactionListRes) Descriptor() ([]byte, []int) {
	return file_wallet_wallet_proto_rawDescGZIP(), []int{26}
}

func (x *GetTransactionListRes) GetPagination() *ResponsePagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetTransactionListRes) GetTransactionDetails() []*TransactionDetail {
	if x != nil {
		return x.TransactionDetails
	}
	return nil
}

func (x *GetTransactionListRes) GetTotalTrans() int64 {
	if x != nil {
		return x.TotalTrans
	}
	return 0
}

var File_wallet_wallet_proto protoreflect.FileDescriptor

var file_wallet_wallet_proto_rawDesc = []byte{
	0x0a, 0x13, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x2d, 0x0a,
	0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x3e, 0x0a, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x43, 0x0a, 0x11,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x44, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x3f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x7b, 0x0a, 0x13, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x92, 0x07, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x74,
	0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x74, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x74, 0x68, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x45, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x78, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x72,
	0x78, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x45, 0x72, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x45, 0x72, 0x63, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72,
	0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x72, 0x63, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x74, 0x63, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x42, 0x74, 0x63, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x74, 0x68, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x45, 0x74, 0x68, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x78, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x54, 0x72, 0x78, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x72, 0x63, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x45, 0x72, 0x63, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x63, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x54, 0x72, 0x63, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x2c,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x28,
	0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x49, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x61, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4c,
	0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x92, 0x08, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x64, 0x73,
	0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x78, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x70,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x43,
	0x6f, 0x69, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x55, 0x73,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x59, 0x75, 0x61, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x59, 0x75, 0x61,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x75, 0x72, 0x6f, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x45, 0x75, 0x72,
	0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x46, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x73, 0x64, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x55, 0x73, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x59, 0x75, 0x61, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x59, 0x75, 0x61, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x75, 0x72, 0x6f, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x45,
	0x75, 0x72, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x59, 0x75, 0x61, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x59, 0x75, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x75, 0x72, 0x6f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x75, 0x72, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55,
	0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x47,
	0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x47,
	0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x83, 0x03, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x20,
	0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x10, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f,
	0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x78, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x46, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x64,
	0x73, 0x4c, 0x6f, 0x67, 0x52, 0x07, 0x46, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x4c,
	0x6f, 0x67, 0x73, 0x22, 0x36, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x8c, 0x01, 0x0a, 0x08,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4c, 0x61,
	0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x47, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x30, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x6c, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x55, 0x73, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x55, 0x73, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x59, 0x75, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x59, 0x75,
	0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x75, 0x72, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x45, 0x75, 0x72, 0x6f, 0x22, 0x36, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0x68,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x48, 0x61, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x48, 0x61, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x36, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x81, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x64, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xe8, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x39, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x89, 0x04, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x46, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x54, 0x58, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65,
	0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x54, 0x58, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x61, 0x73, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xbe,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x12, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x32,
	0xdd, 0x06, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x54, 0x65,
	0x73, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x50, 0x43, 0x12, 0x11, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x68, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x50,
	0x43, 0x12, 0x23, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x4c,
	0x6f, 0x67, 0x12, 0x16, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x41, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x17, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x44, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x50, 0x43, 0x12, 0x1f, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x50,
	0x43, 0x12, 0x1d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x42,
	0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x3b, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wallet_wallet_proto_rawDescOnce sync.Once
	file_wallet_wallet_proto_rawDescData = file_wallet_wallet_proto_rawDesc
)

func file_wallet_wallet_proto_rawDescGZIP() []byte {
	file_wallet_wallet_proto_rawDescOnce.Do(func() {
		file_wallet_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(file_wallet_wallet_proto_rawDescData)
	})
	return file_wallet_wallet_proto_rawDescData
}

var file_wallet_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_wallet_wallet_proto_goTypes = []interface{}{
	(*CommonReq)(nil),                    // 0: wallet.CommonReq
	(*CommonResp)(nil),                   // 1: wallet.CommonResp
	(*RequestPagination)(nil),            // 2: wallet.RequestPagination
	(*ResponsePagination)(nil),           // 3: wallet.ResponsePagination
	(*GetSupportTokenAddressesReq)(nil),  // 4: wallet.GetSupportTokenAddressesReq
	(*SupportTokenAddress)(nil),          // 5: wallet.SupportTokenAddress
	(*GetSupportTokenAddressesResp)(nil), // 6: wallet.GetSupportTokenAddressesResp
	(*CreateAccountInfoReq)(nil),         // 7: wallet.CreateAccountInfoReq
	(*CreateAccountInfoResp)(nil),        // 8: wallet.CreateAccountInfoResp
	(*UpdateAccountInfoReq)(nil),         // 9: wallet.UpdateAccountInfoReq
	(*FundsLog)(nil),                     // 10: wallet.FundsLog
	(*GetFundsLogReq)(nil),               // 11: wallet.GetFundsLogReq
	(*GetFundsLogResp)(nil),              // 12: wallet.GetFundsLogResp
	(*GetCoinStatusesReq)(nil),           // 13: wallet.GetCoinStatusesReq
	(*Currency)(nil),                     // 14: wallet.Currency
	(*GetCoinStatusesResp)(nil),          // 15: wallet.GetCoinStatusesResp
	(*GetCoinRatioReq)(nil),              // 16: wallet.GetCoinRatioReq
	(*Coin)(nil),                         // 17: wallet.Coin
	(*GetCoinRatioResp)(nil),             // 18: wallet.GetCoinRatioResp
	(*GetUserWalletReq)(nil),             // 19: wallet.GetUserWalletReq
	(*GetUserWalletResp)(nil),            // 20: wallet.GetUserWalletResp
	(*UpdateCoinRatesReq)(nil),           // 21: wallet.UpdateCoinRatesReq
	(*GetTransactionDetailReq)(nil),      // 22: wallet.GetTransactionDetailReq
	(*GetTransactionDetailRes)(nil),      // 23: wallet.GetTransactionDetailRes
	(*GetTransactionListReq)(nil),        // 24: wallet.GetTransactionListReq
	(*TransactionDetail)(nil),            // 25: wallet.TransactionDetail
	(*GetTransactionListRes)(nil),        // 26: wallet.GetTransactionListRes
}
var file_wallet_wallet_proto_depIdxs = []int32{
	5,  // 0: wallet.GetSupportTokenAddressesResp.AddressList:type_name -> wallet.SupportTokenAddress
	2,  // 1: wallet.GetFundsLogReq.Pagination:type_name -> wallet.RequestPagination
	3,  // 2: wallet.GetFundsLogResp.Pagination:type_name -> wallet.ResponsePagination
	10, // 3: wallet.GetFundsLogResp.FundLog:type_name -> wallet.FundsLog
	14, // 4: wallet.GetCoinStatusesResp.Currencies:type_name -> wallet.Currency
	17, // 5: wallet.GetCoinRatioResp.Coins:type_name -> wallet.Coin
	25, // 6: wallet.GetTransactionDetailRes.TransactionDetails:type_name -> wallet.TransactionDetail
	2,  // 7: wallet.GetTransactionListReq.Pagination:type_name -> wallet.RequestPagination
	3,  // 8: wallet.GetTransactionListRes.Pagination:type_name -> wallet.ResponsePagination
	25, // 9: wallet.GetTransactionListRes.TransactionDetails:type_name -> wallet.TransactionDetail
	0,  // 10: wallet.wallet.TestWalletRPC:input_type -> wallet.CommonReq
	4,  // 11: wallet.wallet.GetSupportTokenAddressesRPC:input_type -> wallet.GetSupportTokenAddressesReq
	7,  // 12: wallet.wallet.CreateAccountInformation:input_type -> wallet.CreateAccountInfoReq
	9,  // 13: wallet.wallet.UpdateAccountInformation:input_type -> wallet.UpdateAccountInfoReq
	11, // 14: wallet.wallet.GetFundsLog:input_type -> wallet.GetFundsLogReq
	13, // 15: wallet.wallet.GetCoinStatuses:input_type -> wallet.GetCoinStatusesReq
	16, // 16: wallet.wallet.GetCoinRatio:input_type -> wallet.GetCoinRatioReq
	19, // 17: wallet.wallet.GetUserWallet:input_type -> wallet.GetUserWalletReq
	21, // 18: wallet.wallet.UpdateCoinRates:input_type -> wallet.UpdateCoinRatesReq
	22, // 19: wallet.wallet.GetTransactionDetailRPC:input_type -> wallet.GetTransactionDetailReq
	24, // 20: wallet.wallet.GetTransactionListRPC:input_type -> wallet.GetTransactionListReq
	1,  // 21: wallet.wallet.TestWalletRPC:output_type -> wallet.CommonResp
	6,  // 22: wallet.wallet.GetSupportTokenAddressesRPC:output_type -> wallet.GetSupportTokenAddressesResp
	8,  // 23: wallet.wallet.CreateAccountInformation:output_type -> wallet.CreateAccountInfoResp
	1,  // 24: wallet.wallet.UpdateAccountInformation:output_type -> wallet.CommonResp
	12, // 25: wallet.wallet.GetFundsLog:output_type -> wallet.GetFundsLogResp
	15, // 26: wallet.wallet.GetCoinStatuses:output_type -> wallet.GetCoinStatusesResp
	18, // 27: wallet.wallet.GetCoinRatio:output_type -> wallet.GetCoinRatioResp
	20, // 28: wallet.wallet.GetUserWallet:output_type -> wallet.GetUserWalletResp
	1,  // 29: wallet.wallet.UpdateCoinRates:output_type -> wallet.CommonResp
	23, // 30: wallet.wallet.GetTransactionDetailRPC:output_type -> wallet.GetTransactionDetailRes
	26, // 31: wallet.wallet.GetTransactionListRPC:output_type -> wallet.GetTransactionListRes
	21, // [21:32] is the sub-list for method output_type
	10, // [10:21] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_wallet_wallet_proto_init() }
func file_wallet_wallet_proto_init() {
	if File_wallet_wallet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wallet_wallet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupportTokenAddressesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportTokenAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSupportTokenAddressesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundsLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFundsLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFundsLogResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinStatusesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinStatusesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinRatioReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinRatioResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserWalletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserWalletResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoinRatesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionDetailRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_wallet_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wallet_wallet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wallet_wallet_proto_goTypes,
		DependencyIndexes: file_wallet_wallet_proto_depIdxs,
		MessageInfos:      file_wallet_wallet_proto_msgTypes,
	}.Build()
	File_wallet_wallet_proto = out.File
	file_wallet_wallet_proto_rawDesc = nil
	file_wallet_wallet_proto_goTypes = nil
	file_wallet_wallet_proto_depIdxs = nil
}
