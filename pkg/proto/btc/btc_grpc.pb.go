// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: btc/btc.proto

package btc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BtcClient is the client API for Btc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BtcClient interface {
	TestBtcRPC(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetBlockChainInfoRPC(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*GetBlockChainInfoResp, error)
}

type btcClient struct {
	cc grpc.ClientConnInterface
}

func NewBtcClient(cc grpc.ClientConnInterface) BtcClient {
	return &btcClient{cc}
}

func (c *btcClient) TestBtcRPC(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/btc.btc/TestBtcRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *btcClient) GetBlockChainInfoRPC(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*GetBlockChainInfoResp, error) {
	out := new(GetBlockChainInfoResp)
	err := c.cc.Invoke(ctx, "/btc.btc/GetBlockChainInfoRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BtcServer is the server API for Btc service.
// All implementations should embed UnimplementedBtcServer
// for forward compatibility
type BtcServer interface {
	TestBtcRPC(context.Context, *CommonReq) (*CommonResp, error)
	GetBlockChainInfoRPC(context.Context, *CommonReq) (*GetBlockChainInfoResp, error)
}

// UnimplementedBtcServer should be embedded to have forward compatible implementations.
type UnimplementedBtcServer struct {
}

func (UnimplementedBtcServer) TestBtcRPC(context.Context, *CommonReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestBtcRPC not implemented")
}
func (UnimplementedBtcServer) GetBlockChainInfoRPC(context.Context, *CommonReq) (*GetBlockChainInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockChainInfoRPC not implemented")
}

// UnsafeBtcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BtcServer will
// result in compilation errors.
type UnsafeBtcServer interface {
	mustEmbedUnimplementedBtcServer()
}

func RegisterBtcServer(s grpc.ServiceRegistrar, srv BtcServer) {
	s.RegisterService(&Btc_ServiceDesc, srv)
}

func _Btc_TestBtcRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcServer).TestBtcRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btc.btc/TestBtcRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcServer).TestBtcRPC(ctx, req.(*CommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Btc_GetBlockChainInfoRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BtcServer).GetBlockChainInfoRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btc.btc/GetBlockChainInfoRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BtcServer).GetBlockChainInfoRPC(ctx, req.(*CommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Btc_ServiceDesc is the grpc.ServiceDesc for Btc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Btc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "btc.btc",
	HandlerType: (*BtcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestBtcRPC",
			Handler:    _Btc_TestBtcRPC_Handler,
		},
		{
			MethodName: "GetBlockChainInfoRPC",
			Handler:    _Btc_GetBlockChainInfoRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "btc/btc.proto",
}
