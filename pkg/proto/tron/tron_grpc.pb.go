// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: tron/tron.proto

package tron

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TronClient is the client API for Tron service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TronClient interface {
	GetTronBalanceRPC(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error)
	CreateTransactionRPC(ctx context.Context, in *CreateTransactionReq, opts ...grpc.CallOption) (*CreateTransactionResp, error)
	TransferRPC(ctx context.Context, in *PostTransferReq, opts ...grpc.CallOption) (*TransferRPCResponse, error)
	GetConfirmationRPC(ctx context.Context, in *GetTronConfirmationReq, opts ...grpc.CallOption) (*GetTronConfirmationRes, error)
}

type tronClient struct {
	cc grpc.ClientConnInterface
}

func NewTronClient(cc grpc.ClientConnInterface) TronClient {
	return &tronClient{cc}
}

func (c *tronClient) GetTronBalanceRPC(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error) {
	out := new(GetBalanceResp)
	err := c.cc.Invoke(ctx, "/tron.tron/GetTronBalanceRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tronClient) CreateTransactionRPC(ctx context.Context, in *CreateTransactionReq, opts ...grpc.CallOption) (*CreateTransactionResp, error) {
	out := new(CreateTransactionResp)
	err := c.cc.Invoke(ctx, "/tron.tron/CreateTransactionRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tronClient) TransferRPC(ctx context.Context, in *PostTransferReq, opts ...grpc.CallOption) (*TransferRPCResponse, error) {
	out := new(TransferRPCResponse)
	err := c.cc.Invoke(ctx, "/tron.tron/TransferRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tronClient) GetConfirmationRPC(ctx context.Context, in *GetTronConfirmationReq, opts ...grpc.CallOption) (*GetTronConfirmationRes, error) {
	out := new(GetTronConfirmationRes)
	err := c.cc.Invoke(ctx, "/tron.tron/GetConfirmationRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TronServer is the server API for Tron service.
// All implementations should embed UnimplementedTronServer
// for forward compatibility
type TronServer interface {
	GetTronBalanceRPC(context.Context, *GetBalanceReq) (*GetBalanceResp, error)
	CreateTransactionRPC(context.Context, *CreateTransactionReq) (*CreateTransactionResp, error)
	TransferRPC(context.Context, *PostTransferReq) (*TransferRPCResponse, error)
	GetConfirmationRPC(context.Context, *GetTronConfirmationReq) (*GetTronConfirmationRes, error)
}

// UnimplementedTronServer should be embedded to have forward compatible implementations.
type UnimplementedTronServer struct {
}

func (UnimplementedTronServer) GetTronBalanceRPC(context.Context, *GetBalanceReq) (*GetBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTronBalanceRPC not implemented")
}
func (UnimplementedTronServer) CreateTransactionRPC(context.Context, *CreateTransactionReq) (*CreateTransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransactionRPC not implemented")
}
func (UnimplementedTronServer) TransferRPC(context.Context, *PostTransferReq) (*TransferRPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferRPC not implemented")
}
func (UnimplementedTronServer) GetConfirmationRPC(context.Context, *GetTronConfirmationReq) (*GetTronConfirmationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfirmationRPC not implemented")
}

// UnsafeTronServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TronServer will
// result in compilation errors.
type UnsafeTronServer interface {
	mustEmbedUnimplementedTronServer()
}

func RegisterTronServer(s grpc.ServiceRegistrar, srv TronServer) {
	s.RegisterService(&Tron_ServiceDesc, srv)
}

func _Tron_GetTronBalanceRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TronServer).GetTronBalanceRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tron.tron/GetTronBalanceRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TronServer).GetTronBalanceRPC(ctx, req.(*GetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tron_CreateTransactionRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TronServer).CreateTransactionRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tron.tron/CreateTransactionRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TronServer).CreateTransactionRPC(ctx, req.(*CreateTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tron_TransferRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TronServer).TransferRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tron.tron/TransferRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TronServer).TransferRPC(ctx, req.(*PostTransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tron_GetConfirmationRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTronConfirmationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TronServer).GetConfirmationRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tron.tron/GetConfirmationRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TronServer).GetConfirmationRPC(ctx, req.(*GetTronConfirmationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Tron_ServiceDesc is the grpc.ServiceDesc for Tron service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tron_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tron.tron",
	HandlerType: (*TronServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTronBalanceRPC",
			Handler:    _Tron_GetTronBalanceRPC_Handler,
		},
		{
			MethodName: "CreateTransactionRPC",
			Handler:    _Tron_CreateTransactionRPC_Handler,
		},
		{
			MethodName: "TransferRPC",
			Handler:    _Tron_TransferRPC_Handler,
		},
		{
			MethodName: "GetConfirmationRPC",
			Handler:    _Tron_GetConfirmationRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tron/tron.proto",
}
