// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: eth/eth.proto

package eth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EthClient is the client API for Eth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EthClient interface {
	TestEthRPC(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetEthBalanceRPC(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error)
	GetEthGasPriceRPC(ctx context.Context, in *GetGasPriceReq, opts ...grpc.CallOption) (*GetGasPriceRes, error)
	TransferRPC(ctx context.Context, in *PostTransferReq, opts ...grpc.CallOption) (*TransferRPCResponse, error)
	TransferRPCV2(ctx context.Context, in *PostTransferReq2, opts ...grpc.CallOption) (*TransferRPCResponse2, error)
	GetConfirmationRPC(ctx context.Context, in *GetEthConfirmationReq, opts ...grpc.CallOption) (*GetEthConfirmationRes, error)
	CheckBalanceAndGetNonceRPC(ctx context.Context, in *CheckBalanceAndGetNonceReq, opts ...grpc.CallOption) (*CheckBalanceAndGetNonceResp, error)
}

type ethClient struct {
	cc grpc.ClientConnInterface
}

func NewEthClient(cc grpc.ClientConnInterface) EthClient {
	return &ethClient{cc}
}

func (c *ethClient) TestEthRPC(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/eth.eth/TestEthRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethClient) GetEthBalanceRPC(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error) {
	out := new(GetBalanceResp)
	err := c.cc.Invoke(ctx, "/eth.eth/GetEthBalanceRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethClient) GetEthGasPriceRPC(ctx context.Context, in *GetGasPriceReq, opts ...grpc.CallOption) (*GetGasPriceRes, error) {
	out := new(GetGasPriceRes)
	err := c.cc.Invoke(ctx, "/eth.eth/GetEthGasPriceRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethClient) TransferRPC(ctx context.Context, in *PostTransferReq, opts ...grpc.CallOption) (*TransferRPCResponse, error) {
	out := new(TransferRPCResponse)
	err := c.cc.Invoke(ctx, "/eth.eth/TransferRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethClient) TransferRPCV2(ctx context.Context, in *PostTransferReq2, opts ...grpc.CallOption) (*TransferRPCResponse2, error) {
	out := new(TransferRPCResponse2)
	err := c.cc.Invoke(ctx, "/eth.eth/TransferRPCV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethClient) GetConfirmationRPC(ctx context.Context, in *GetEthConfirmationReq, opts ...grpc.CallOption) (*GetEthConfirmationRes, error) {
	out := new(GetEthConfirmationRes)
	err := c.cc.Invoke(ctx, "/eth.eth/GetConfirmationRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethClient) CheckBalanceAndGetNonceRPC(ctx context.Context, in *CheckBalanceAndGetNonceReq, opts ...grpc.CallOption) (*CheckBalanceAndGetNonceResp, error) {
	out := new(CheckBalanceAndGetNonceResp)
	err := c.cc.Invoke(ctx, "/eth.eth/CheckBalanceAndGetNonceRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EthServer is the server API for Eth service.
// All implementations should embed UnimplementedEthServer
// for forward compatibility
type EthServer interface {
	TestEthRPC(context.Context, *CommonReq) (*CommonResp, error)
	GetEthBalanceRPC(context.Context, *GetBalanceReq) (*GetBalanceResp, error)
	GetEthGasPriceRPC(context.Context, *GetGasPriceReq) (*GetGasPriceRes, error)
	TransferRPC(context.Context, *PostTransferReq) (*TransferRPCResponse, error)
	TransferRPCV2(context.Context, *PostTransferReq2) (*TransferRPCResponse2, error)
	GetConfirmationRPC(context.Context, *GetEthConfirmationReq) (*GetEthConfirmationRes, error)
	CheckBalanceAndGetNonceRPC(context.Context, *CheckBalanceAndGetNonceReq) (*CheckBalanceAndGetNonceResp, error)
}

// UnimplementedEthServer should be embedded to have forward compatible implementations.
type UnimplementedEthServer struct {
}

func (UnimplementedEthServer) TestEthRPC(context.Context, *CommonReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestEthRPC not implemented")
}
func (UnimplementedEthServer) GetEthBalanceRPC(context.Context, *GetBalanceReq) (*GetBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEthBalanceRPC not implemented")
}
func (UnimplementedEthServer) GetEthGasPriceRPC(context.Context, *GetGasPriceReq) (*GetGasPriceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEthGasPriceRPC not implemented")
}
func (UnimplementedEthServer) TransferRPC(context.Context, *PostTransferReq) (*TransferRPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferRPC not implemented")
}
func (UnimplementedEthServer) TransferRPCV2(context.Context, *PostTransferReq2) (*TransferRPCResponse2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferRPCV2 not implemented")
}
func (UnimplementedEthServer) GetConfirmationRPC(context.Context, *GetEthConfirmationReq) (*GetEthConfirmationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfirmationRPC not implemented")
}
func (UnimplementedEthServer) CheckBalanceAndGetNonceRPC(context.Context, *CheckBalanceAndGetNonceReq) (*CheckBalanceAndGetNonceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBalanceAndGetNonceRPC not implemented")
}

// UnsafeEthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EthServer will
// result in compilation errors.
type UnsafeEthServer interface {
	mustEmbedUnimplementedEthServer()
}

func RegisterEthServer(s grpc.ServiceRegistrar, srv EthServer) {
	s.RegisterService(&Eth_ServiceDesc, srv)
}

func _Eth_TestEthRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServer).TestEthRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.eth/TestEthRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServer).TestEthRPC(ctx, req.(*CommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eth_GetEthBalanceRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServer).GetEthBalanceRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.eth/GetEthBalanceRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServer).GetEthBalanceRPC(ctx, req.(*GetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eth_GetEthGasPriceRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGasPriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServer).GetEthGasPriceRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.eth/GetEthGasPriceRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServer).GetEthGasPriceRPC(ctx, req.(*GetGasPriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eth_TransferRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTransferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServer).TransferRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.eth/TransferRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServer).TransferRPC(ctx, req.(*PostTransferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eth_TransferRPCV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTransferReq2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServer).TransferRPCV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.eth/TransferRPCV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServer).TransferRPCV2(ctx, req.(*PostTransferReq2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eth_GetConfirmationRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEthConfirmationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServer).GetConfirmationRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.eth/GetConfirmationRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServer).GetConfirmationRPC(ctx, req.(*GetEthConfirmationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eth_CheckBalanceAndGetNonceRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBalanceAndGetNonceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthServer).CheckBalanceAndGetNonceRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eth.eth/CheckBalanceAndGetNonceRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthServer).CheckBalanceAndGetNonceRPC(ctx, req.(*CheckBalanceAndGetNonceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Eth_ServiceDesc is the grpc.ServiceDesc for Eth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Eth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eth.eth",
	HandlerType: (*EthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestEthRPC",
			Handler:    _Eth_TestEthRPC_Handler,
		},
		{
			MethodName: "GetEthBalanceRPC",
			Handler:    _Eth_GetEthBalanceRPC_Handler,
		},
		{
			MethodName: "GetEthGasPriceRPC",
			Handler:    _Eth_GetEthGasPriceRPC_Handler,
		},
		{
			MethodName: "TransferRPC",
			Handler:    _Eth_TransferRPC_Handler,
		},
		{
			MethodName: "TransferRPCV2",
			Handler:    _Eth_TransferRPCV2_Handler,
		},
		{
			MethodName: "GetConfirmationRPC",
			Handler:    _Eth_GetConfirmationRPC_Handler,
		},
		{
			MethodName: "CheckBalanceAndGetNonceRPC",
			Handler:    _Eth_CheckBalanceAndGetNonceRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eth/eth.proto",
}
