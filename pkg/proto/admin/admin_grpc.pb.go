// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: admin/admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	TestAdminRPC(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*CommonResp, error)
	AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error)
	ChangeAdminUserPassword(ctx context.Context, in *ChangeAdminUserPasswordReq, opts ...grpc.CallOption) (*ChangeAdminUserPasswordResp, error)
	AddAdminUser(ctx context.Context, in *AddAdminUserReq, opts ...grpc.CallOption) (*AddAdminUserResp, error)
	AddAdminUserRole(ctx context.Context, in *AddAdminUserRoleReq, opts ...grpc.CallOption) (*AddAdminRoleResp, error)
	GetAdminUserList(ctx context.Context, in *GetAdminUserListReq, opts ...grpc.CallOption) (*GetAdminUserListResp, error)
	GetAdminUserRole(ctx context.Context, in *GetAdminUserRoleReq, opts ...grpc.CallOption) (*GetAdminUserRoleResp, error)
	DeleteAdminUser(ctx context.Context, in *DeleteAdminReq, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateAdminUser(ctx context.Context, in *UpdateAdminReq, opts ...grpc.CallOption) (*UpdateAdminResp, error)
	UpdateAdminRole(ctx context.Context, in *UpdateAdminRoleRequest, opts ...grpc.CallOption) (*UpdateAdminRoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteAdminRoleRequest, opts ...grpc.CallOption) (*CommonResp, error)
	AdminLoginV2(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error)
	GetAdminRoleActions(ctx context.Context, in *GetAdminActionsRequest, opts ...grpc.CallOption) (*Action, error)
	GetAdminUser(ctx context.Context, in *GetAdminUserRequest, opts ...grpc.CallOption) (*GetAdminUserResponse, error)
	GetAccountInformation(ctx context.Context, in *GetAccountInformationReq, opts ...grpc.CallOption) (*GetAccountInformationResp, error)
	GetFundsLog(ctx context.Context, in *GetFundsLogReq, opts ...grpc.CallOption) (*GetFundsLogResp, error)
	GetReceiveDetails(ctx context.Context, in *GetReceiveDetailsReq, opts ...grpc.CallOption) (*GetReceiveDetailsResp, error)
	GetTransferDetails(ctx context.Context, in *GetTransferDetailsReq, opts ...grpc.CallOption) (*GetTransferDetailsResp, error)
	ResetGoogleKey(ctx context.Context, in *ResetGoogleKeyReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetRoleActions(ctx context.Context, in *GetRoleActionsReq, opts ...grpc.CallOption) (*GetRoleActionsResp, error)
	GetCurrencies(ctx context.Context, in *GetCurrenciesReq, opts ...grpc.CallOption) (*GetCurrenciesResp, error)
	UpdateCurrency(ctx context.Context, in *UpdateCurrencyReq, opts ...grpc.CallOption) (*CommonResp, error)
	GetOperationalReport(ctx context.Context, in *GetOperationalReportReq, opts ...grpc.CallOption) (*GetOperationalReportResp, error)
	UpdateAccountBalance(ctx context.Context, in *UpdateAccountBalanceReq, opts ...grpc.CallOption) (*UpdateAccountBalanceResp, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) TestAdminRPC(ctx context.Context, in *CommonReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/admin.admin/TestAdminRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error) {
	out := new(AdminLoginResp)
	err := c.cc.Invoke(ctx, "/admin.admin/AdminLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ChangeAdminUserPassword(ctx context.Context, in *ChangeAdminUserPasswordReq, opts ...grpc.CallOption) (*ChangeAdminUserPasswordResp, error) {
	out := new(ChangeAdminUserPasswordResp)
	err := c.cc.Invoke(ctx, "/admin.admin/ChangeAdminUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddAdminUser(ctx context.Context, in *AddAdminUserReq, opts ...grpc.CallOption) (*AddAdminUserResp, error) {
	out := new(AddAdminUserResp)
	err := c.cc.Invoke(ctx, "/admin.admin/AddAdminUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddAdminUserRole(ctx context.Context, in *AddAdminUserRoleReq, opts ...grpc.CallOption) (*AddAdminRoleResp, error) {
	out := new(AddAdminRoleResp)
	err := c.cc.Invoke(ctx, "/admin.admin/AddAdminUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAdminUserList(ctx context.Context, in *GetAdminUserListReq, opts ...grpc.CallOption) (*GetAdminUserListResp, error) {
	out := new(GetAdminUserListResp)
	err := c.cc.Invoke(ctx, "/admin.admin/GetAdminUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAdminUserRole(ctx context.Context, in *GetAdminUserRoleReq, opts ...grpc.CallOption) (*GetAdminUserRoleResp, error) {
	out := new(GetAdminUserRoleResp)
	err := c.cc.Invoke(ctx, "/admin.admin/GetAdminUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteAdminUser(ctx context.Context, in *DeleteAdminReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/admin.admin/DeleteAdminUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateAdminUser(ctx context.Context, in *UpdateAdminReq, opts ...grpc.CallOption) (*UpdateAdminResp, error) {
	out := new(UpdateAdminResp)
	err := c.cc.Invoke(ctx, "/admin.admin/UpdateAdminUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateAdminRole(ctx context.Context, in *UpdateAdminRoleRequest, opts ...grpc.CallOption) (*UpdateAdminRoleResponse, error) {
	out := new(UpdateAdminRoleResponse)
	err := c.cc.Invoke(ctx, "/admin.admin/UpdateAdminRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteRole(ctx context.Context, in *DeleteAdminRoleRequest, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/admin.admin/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AdminLoginV2(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error) {
	out := new(AdminLoginResp)
	err := c.cc.Invoke(ctx, "/admin.admin/AdminLoginV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAdminRoleActions(ctx context.Context, in *GetAdminActionsRequest, opts ...grpc.CallOption) (*Action, error) {
	out := new(Action)
	err := c.cc.Invoke(ctx, "/admin.admin/GetAdminRoleActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAdminUser(ctx context.Context, in *GetAdminUserRequest, opts ...grpc.CallOption) (*GetAdminUserResponse, error) {
	out := new(GetAdminUserResponse)
	err := c.cc.Invoke(ctx, "/admin.admin/GetAdminUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAccountInformation(ctx context.Context, in *GetAccountInformationReq, opts ...grpc.CallOption) (*GetAccountInformationResp, error) {
	out := new(GetAccountInformationResp)
	err := c.cc.Invoke(ctx, "/admin.admin/GetAccountInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetFundsLog(ctx context.Context, in *GetFundsLogReq, opts ...grpc.CallOption) (*GetFundsLogResp, error) {
	out := new(GetFundsLogResp)
	err := c.cc.Invoke(ctx, "/admin.admin/GetFundsLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetReceiveDetails(ctx context.Context, in *GetReceiveDetailsReq, opts ...grpc.CallOption) (*GetReceiveDetailsResp, error) {
	out := new(GetReceiveDetailsResp)
	err := c.cc.Invoke(ctx, "/admin.admin/GetReceiveDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetTransferDetails(ctx context.Context, in *GetTransferDetailsReq, opts ...grpc.CallOption) (*GetTransferDetailsResp, error) {
	out := new(GetTransferDetailsResp)
	err := c.cc.Invoke(ctx, "/admin.admin/GetTransferDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ResetGoogleKey(ctx context.Context, in *ResetGoogleKeyReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/admin.admin/ResetGoogleKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetRoleActions(ctx context.Context, in *GetRoleActionsReq, opts ...grpc.CallOption) (*GetRoleActionsResp, error) {
	out := new(GetRoleActionsResp)
	err := c.cc.Invoke(ctx, "/admin.admin/GetRoleActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetCurrencies(ctx context.Context, in *GetCurrenciesReq, opts ...grpc.CallOption) (*GetCurrenciesResp, error) {
	out := new(GetCurrenciesResp)
	err := c.cc.Invoke(ctx, "/admin.admin/GetCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateCurrency(ctx context.Context, in *UpdateCurrencyReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/admin.admin/UpdateCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetOperationalReport(ctx context.Context, in *GetOperationalReportReq, opts ...grpc.CallOption) (*GetOperationalReportResp, error) {
	out := new(GetOperationalReportResp)
	err := c.cc.Invoke(ctx, "/admin.admin/GetOperationalReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateAccountBalance(ctx context.Context, in *UpdateAccountBalanceReq, opts ...grpc.CallOption) (*UpdateAccountBalanceResp, error) {
	out := new(UpdateAccountBalanceResp)
	err := c.cc.Invoke(ctx, "/admin.admin/UpdateAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations should embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	TestAdminRPC(context.Context, *CommonReq) (*CommonResp, error)
	AdminLogin(context.Context, *AdminLoginReq) (*AdminLoginResp, error)
	ChangeAdminUserPassword(context.Context, *ChangeAdminUserPasswordReq) (*ChangeAdminUserPasswordResp, error)
	AddAdminUser(context.Context, *AddAdminUserReq) (*AddAdminUserResp, error)
	AddAdminUserRole(context.Context, *AddAdminUserRoleReq) (*AddAdminRoleResp, error)
	GetAdminUserList(context.Context, *GetAdminUserListReq) (*GetAdminUserListResp, error)
	GetAdminUserRole(context.Context, *GetAdminUserRoleReq) (*GetAdminUserRoleResp, error)
	DeleteAdminUser(context.Context, *DeleteAdminReq) (*CommonResp, error)
	UpdateAdminUser(context.Context, *UpdateAdminReq) (*UpdateAdminResp, error)
	UpdateAdminRole(context.Context, *UpdateAdminRoleRequest) (*UpdateAdminRoleResponse, error)
	DeleteRole(context.Context, *DeleteAdminRoleRequest) (*CommonResp, error)
	AdminLoginV2(context.Context, *AdminLoginReq) (*AdminLoginResp, error)
	GetAdminRoleActions(context.Context, *GetAdminActionsRequest) (*Action, error)
	GetAdminUser(context.Context, *GetAdminUserRequest) (*GetAdminUserResponse, error)
	GetAccountInformation(context.Context, *GetAccountInformationReq) (*GetAccountInformationResp, error)
	GetFundsLog(context.Context, *GetFundsLogReq) (*GetFundsLogResp, error)
	GetReceiveDetails(context.Context, *GetReceiveDetailsReq) (*GetReceiveDetailsResp, error)
	GetTransferDetails(context.Context, *GetTransferDetailsReq) (*GetTransferDetailsResp, error)
	ResetGoogleKey(context.Context, *ResetGoogleKeyReq) (*CommonResp, error)
	GetRoleActions(context.Context, *GetRoleActionsReq) (*GetRoleActionsResp, error)
	GetCurrencies(context.Context, *GetCurrenciesReq) (*GetCurrenciesResp, error)
	UpdateCurrency(context.Context, *UpdateCurrencyReq) (*CommonResp, error)
	GetOperationalReport(context.Context, *GetOperationalReportReq) (*GetOperationalReportResp, error)
	UpdateAccountBalance(context.Context, *UpdateAccountBalanceReq) (*UpdateAccountBalanceResp, error)
}

// UnimplementedAdminServer should be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) TestAdminRPC(context.Context, *CommonReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestAdminRPC not implemented")
}
func (UnimplementedAdminServer) AdminLogin(context.Context, *AdminLoginReq) (*AdminLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedAdminServer) ChangeAdminUserPassword(context.Context, *ChangeAdminUserPasswordReq) (*ChangeAdminUserPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAdminUserPassword not implemented")
}
func (UnimplementedAdminServer) AddAdminUser(context.Context, *AddAdminUserReq) (*AddAdminUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdminUser not implemented")
}
func (UnimplementedAdminServer) AddAdminUserRole(context.Context, *AddAdminUserRoleReq) (*AddAdminRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdminUserRole not implemented")
}
func (UnimplementedAdminServer) GetAdminUserList(context.Context, *GetAdminUserListReq) (*GetAdminUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminUserList not implemented")
}
func (UnimplementedAdminServer) GetAdminUserRole(context.Context, *GetAdminUserRoleReq) (*GetAdminUserRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminUserRole not implemented")
}
func (UnimplementedAdminServer) DeleteAdminUser(context.Context, *DeleteAdminReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdminUser not implemented")
}
func (UnimplementedAdminServer) UpdateAdminUser(context.Context, *UpdateAdminReq) (*UpdateAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminUser not implemented")
}
func (UnimplementedAdminServer) UpdateAdminRole(context.Context, *UpdateAdminRoleRequest) (*UpdateAdminRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminRole not implemented")
}
func (UnimplementedAdminServer) DeleteRole(context.Context, *DeleteAdminRoleRequest) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAdminServer) AdminLoginV2(context.Context, *AdminLoginReq) (*AdminLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLoginV2 not implemented")
}
func (UnimplementedAdminServer) GetAdminRoleActions(context.Context, *GetAdminActionsRequest) (*Action, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminRoleActions not implemented")
}
func (UnimplementedAdminServer) GetAdminUser(context.Context, *GetAdminUserRequest) (*GetAdminUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminUser not implemented")
}
func (UnimplementedAdminServer) GetAccountInformation(context.Context, *GetAccountInformationReq) (*GetAccountInformationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInformation not implemented")
}
func (UnimplementedAdminServer) GetFundsLog(context.Context, *GetFundsLogReq) (*GetFundsLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFundsLog not implemented")
}
func (UnimplementedAdminServer) GetReceiveDetails(context.Context, *GetReceiveDetailsReq) (*GetReceiveDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiveDetails not implemented")
}
func (UnimplementedAdminServer) GetTransferDetails(context.Context, *GetTransferDetailsReq) (*GetTransferDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransferDetails not implemented")
}
func (UnimplementedAdminServer) ResetGoogleKey(context.Context, *ResetGoogleKeyReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetGoogleKey not implemented")
}
func (UnimplementedAdminServer) GetRoleActions(context.Context, *GetRoleActionsReq) (*GetRoleActionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleActions not implemented")
}
func (UnimplementedAdminServer) GetCurrencies(context.Context, *GetCurrenciesReq) (*GetCurrenciesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencies not implemented")
}
func (UnimplementedAdminServer) UpdateCurrency(context.Context, *UpdateCurrencyReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrency not implemented")
}
func (UnimplementedAdminServer) GetOperationalReport(context.Context, *GetOperationalReportReq) (*GetOperationalReportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationalReport not implemented")
}
func (UnimplementedAdminServer) UpdateAccountBalance(context.Context, *UpdateAccountBalanceReq) (*UpdateAccountBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountBalance not implemented")
}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_TestAdminRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).TestAdminRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/TestAdminRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).TestAdminRPC(ctx, req.(*CommonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/AdminLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AdminLogin(ctx, req.(*AdminLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ChangeAdminUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAdminUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ChangeAdminUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/ChangeAdminUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ChangeAdminUserPassword(ctx, req.(*ChangeAdminUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdminUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/AddAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddAdminUser(ctx, req.(*AddAdminUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddAdminUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdminUserRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddAdminUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/AddAdminUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddAdminUserRole(ctx, req.(*AddAdminUserRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAdminUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAdminUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/GetAdminUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAdminUserList(ctx, req.(*GetAdminUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAdminUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminUserRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAdminUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/GetAdminUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAdminUserRole(ctx, req.(*GetAdminUserRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/DeleteAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteAdminUser(ctx, req.(*DeleteAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/UpdateAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateAdminUser(ctx, req.(*UpdateAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateAdminRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateAdminRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/UpdateAdminRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateAdminRole(ctx, req.(*UpdateAdminRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdminRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteRole(ctx, req.(*DeleteAdminRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AdminLoginV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AdminLoginV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/AdminLoginV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AdminLoginV2(ctx, req.(*AdminLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAdminRoleActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAdminRoleActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/GetAdminRoleActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAdminRoleActions(ctx, req.(*GetAdminActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/GetAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAdminUser(ctx, req.(*GetAdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAccountInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountInformationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAccountInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/GetAccountInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAccountInformation(ctx, req.(*GetAccountInformationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetFundsLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFundsLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetFundsLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/GetFundsLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetFundsLog(ctx, req.(*GetFundsLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetReceiveDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiveDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetReceiveDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/GetReceiveDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetReceiveDetails(ctx, req.(*GetReceiveDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetTransferDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetTransferDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/GetTransferDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetTransferDetails(ctx, req.(*GetTransferDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ResetGoogleKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetGoogleKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ResetGoogleKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/ResetGoogleKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ResetGoogleKey(ctx, req.(*ResetGoogleKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetRoleActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleActionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRoleActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/GetRoleActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRoleActions(ctx, req.(*GetRoleActionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrenciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/GetCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetCurrencies(ctx, req.(*GetCurrenciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrencyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/UpdateCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateCurrency(ctx, req.(*UpdateCurrencyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetOperationalReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationalReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetOperationalReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/GetOperationalReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetOperationalReport(ctx, req.(*GetOperationalReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.admin/UpdateAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateAccountBalance(ctx, req.(*UpdateAccountBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestAdminRPC",
			Handler:    _Admin_TestAdminRPC_Handler,
		},
		{
			MethodName: "AdminLogin",
			Handler:    _Admin_AdminLogin_Handler,
		},
		{
			MethodName: "ChangeAdminUserPassword",
			Handler:    _Admin_ChangeAdminUserPassword_Handler,
		},
		{
			MethodName: "AddAdminUser",
			Handler:    _Admin_AddAdminUser_Handler,
		},
		{
			MethodName: "AddAdminUserRole",
			Handler:    _Admin_AddAdminUserRole_Handler,
		},
		{
			MethodName: "GetAdminUserList",
			Handler:    _Admin_GetAdminUserList_Handler,
		},
		{
			MethodName: "GetAdminUserRole",
			Handler:    _Admin_GetAdminUserRole_Handler,
		},
		{
			MethodName: "DeleteAdminUser",
			Handler:    _Admin_DeleteAdminUser_Handler,
		},
		{
			MethodName: "UpdateAdminUser",
			Handler:    _Admin_UpdateAdminUser_Handler,
		},
		{
			MethodName: "UpdateAdminRole",
			Handler:    _Admin_UpdateAdminRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Admin_DeleteRole_Handler,
		},
		{
			MethodName: "AdminLoginV2",
			Handler:    _Admin_AdminLoginV2_Handler,
		},
		{
			MethodName: "GetAdminRoleActions",
			Handler:    _Admin_GetAdminRoleActions_Handler,
		},
		{
			MethodName: "GetAdminUser",
			Handler:    _Admin_GetAdminUser_Handler,
		},
		{
			MethodName: "GetAccountInformation",
			Handler:    _Admin_GetAccountInformation_Handler,
		},
		{
			MethodName: "GetFundsLog",
			Handler:    _Admin_GetFundsLog_Handler,
		},
		{
			MethodName: "GetReceiveDetails",
			Handler:    _Admin_GetReceiveDetails_Handler,
		},
		{
			MethodName: "GetTransferDetails",
			Handler:    _Admin_GetTransferDetails_Handler,
		},
		{
			MethodName: "ResetGoogleKey",
			Handler:    _Admin_ResetGoogleKey_Handler,
		},
		{
			MethodName: "GetRoleActions",
			Handler:    _Admin_GetRoleActions_Handler,
		},
		{
			MethodName: "GetCurrencies",
			Handler:    _Admin_GetCurrencies_Handler,
		},
		{
			MethodName: "UpdateCurrency",
			Handler:    _Admin_UpdateCurrency_Handler,
		},
		{
			MethodName: "GetOperationalReport",
			Handler:    _Admin_GetOperationalReport_Handler,
		},
		{
			MethodName: "UpdateAccountBalance",
			Handler:    _Admin_UpdateAccountBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/admin.proto",
}
